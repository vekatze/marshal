import {
  binary-builder.entity {builder, create, get},
  binary-builder.scene {append-int8},
  core.binary {binary, binary-access, binary-length},
  core.cell {new-cell},
  core.int.show {show-int},
  core.list {for},
  core.magic,
  this.class {Marshal, _proceed, marshal},
  this.class.int64,
}

inline encode-list<a>(!m: marshal(a)): (b: &builder, xs: &list(a)) -> unit {
  define self(b: &builder, xs: &list(a)): unit {
    case xs {
    | Nil =>
      append-int8(b, 0)
    | Cons(y, ys) =>
      let Marshal of {encode} = !m in
      append-int8(b, 1);
      encode(b, y);
      self(b, ys)
    }
  }
}

inline decode-list<a>(!m: marshal(a)): (b: &binary, cursor-ref: &cell(int)) -> ?list(a) {
  define self(b: &binary, cursor-ref: &cell(int)): ?list(a) {
    let cursor = core.cell.clone(cursor-ref) in
    if lt-int(binary-length(b), add-int(cursor, 1)) {
      none
    } else {
      let v = binary-access(b, add-int(cursor, 0)) in
      if eq-int8(v, 0) {
        _proceed(cursor-ref, 1);
        OK(Nil)
      } else-if eq-int8(v, 1) {
        let Marshal of {decode} = !m in
        _proceed(cursor-ref, 1);
        try v = decode(b, cursor-ref) in
        try vs = self(b, cursor-ref) in
        OK(Cons(v, vs))
      } else {
        none
      }
    }
  }
}

inline necess-list<a>(_: (a) -> meta a): (xs: list(a)) -> meta list(a) {
  function (xs) {
    core.magic.cast(list(a), meta list(a), xs)
  }
}

inline as-marshal<a>(!m: marshal(a)): marshal(list(a)) {
  let Marshal of {necess} = !m in
  Marshal of {
    encode = encode-list(!m),
    decode = decode-list(!m),
    necess = necess-list(necess),
  }
}

inline int-list: marshal(list(int)) {
  as-marshal(this.class.int64.as-marshal)
}

define zen(): unit {
  let Marshal of {encode, decode} = int-list in
  let buf = create(8) in
  pin val = [1, 2, -123, 1384910234] in
  let _ on buf = encode(buf, val) in
  pin b = get(buf) in
  pin cursor-ref = new-cell(0) in
  let mval = decode(b, cursor-ref) in
  match mval {
  | Error(_) =>
    print("left\n")
  | OK(vs) =>
    print("int-list\n");
    for(vs, function (v) {
      printf("val: {}\n", [show-int(v)])
    })
  }
}
