import {
  binary-builder.entity {builder, create, get},
  core.binary {binary},
  core.cell {cell},
  core.int.show {show-int},
  core.magic,
  core.matrix {Matrix, get-col-size, get-content, get-row-size, matrix, print-mat},
  this.class {Marshal, marshal},
  this.class.int64 {decode-int64, encode-int64},
  this.class.vector {decode-vector, encode-vector},
}

inline encode-matrix<a>(m: marshal(a)): (b: &builder, xs: &matrix(a)) -> unit {
  function (b: &builder, xys: &matrix(a)): unit {
    pin row-size = get-row-size(xys) in
    pin col-size = get-col-size(xys) in
    let content = get-content(xys) in
    encode-int64(b, row-size);
    encode-int64(b, col-size);
    encode-vector(m)(b, content)
  }
}

inline decode-matrix<a>(m: marshal(a)): (b: &binary, cursor-ref: &cell(int)) -> ?matrix(a) {
  function (b: &binary, cursor-ref: &cell(int)): ?matrix(a) {
    try row-size = decode-int64(b, cursor-ref) in
    try col-size = decode-int64(b, cursor-ref) in
    try content = decode-vector(m)(b, cursor-ref) in
    Right(Matrix of {row-size, col-size, content})
  }
}

inline necess-matrix<a>(_: (a) -> meta a): (xs: matrix(a)) -> meta matrix(a) {
  function (xs) {
    core.magic.cast(matrix(a), meta matrix(a), xs)
  }
}

inline as-marshal<a>(!m: marshal(a)): marshal(matrix(a)) {
  let Marshal of {necess} = !m in
  Marshal of {
    encode = encode-matrix(!m),
    decode = decode-matrix(!m),
    necess = necess-matrix(necess),
  }
}

constant int-matrix: marshal(matrix(int)) {
  as-marshal(this.class.int64.as-marshal)
}

define zen(): unit {
  let Marshal of {encode, decode} = int-matrix in
  let buf = create(8) in
  pin val =
    core.matrix.new([
      [1, 2, -123, 1384910234],
      [123, 22, 42, 98],
      [3, 4, 5, 6],
    ])
  in
  let _ on buf = encode(buf, val) in
  pin b = get(buf) in
  pin cursor-ref = new-cell(0) in
  let mval = decode(b, cursor-ref) in
  match mval {
  | Left(_) =>
    print("left\n")
  | Right(xys) =>
    print("int-matrix\n");
    pin xys = xys in
    print-mat(xys, function (v) {
      printf("{}", [show-int(*v)])
    })
  }
}
