import {
  binary-builder.entity {builder, create, get},
  core.binary {binary},
  core.cell {new-cell},
  core.int.show {show-int},
  core.magic,
  core.vector {vector},
  this.class {Marshal, marshal},
  this.class.int64 {decode-int64, encode-int64},
}

inline encode-vector<a>(m: marshal(a)): (b: &builder, xs: &vector(a)) -> unit {
  function (b: &builder, xs: &vector(a)): unit {
    pin len = core.vector.length(xs) in
    encode-int64(b, len);
    core.vector.for-N(xs, function (x, _) {
      let Marshal of {encode} = m in
      encode(b, x)
    })
  }
}

inline decode-vector<a>(m: marshal(a)): (b: &binary, cursor-ref: &cell(int)) -> ?vector(a) {
  function (b: &binary, cursor-ref: &cell(int)): ?vector(a) {
    try len = decode-int64(b, cursor-ref) in
    core.vector.create-E(len, function (_) {
      let Marshal of {decode} = m in
      try value = decode(b, cursor-ref) in
      Right(value)
    })
  }
}

inline necess-vector<a>(_: (a) -> meta a): (xs: vector(a)) -> meta vector(a) {
  function (xs) {
    core.magic.cast(vector(a), meta vector(a), xs)
  }
}

inline as-marshal<a>(!m: marshal(a)): marshal(vector(a)) {
  let Marshal of {necess} = !m in
  Marshal of {
    encode = encode-vector(!m),
    decode = decode-vector(!m),
    necess = necess-vector(necess),
  }
}

inline int-vector: marshal(vector(int)) {
  as-marshal(this.class.int64.as-marshal)
}

define zen(): unit {
  let Marshal of {encode, decode} = int-vector in
  let buf = create(8) in
  pin val = core.vector.from-list([1, 2, -123, 1384910234]) in
  let _ on buf = encode(buf, val) in
  pin b = get(buf) in
  pin cursor-ref = new-cell(0) in
  let mval = decode(b, cursor-ref) in
  match mval {
  | Left(_) =>
    print("left\n")
  | Right(vs) =>
    print("int-vector\n");
    pin vs = vs in
    core.vector.for-N(vs, function (v, _) {
      printf("val: {}\n", [show-int(*v)])
    })
  }
}
