import {
  core.binary {binary, binary-length},
  core.box {axiom-T},
  core.text {_Text},
  this.move.common.cursor {proceed-binary},
  this.move.common.save {get, save-binary, save-int64},
  this.move.create-decode-handle {from-bytes},
  this.move.create-encode-handle {create-encode-handle},
  this.rule.decode-handle {decode-handle},
  this.rule.encode-handle {encode-handle},
  this.rule.marshal {Marshal, marshal},
}

define encode-binary(h: &encode-handle, x: &binary): unit {
  let len = binary-length(x) in
  save-int64(h, len);
  save-binary(h, x)
}

define decode-binary(h: &decode-handle): ?meta binary {
  try b = proceed-binary(h) in
  Right(quote {b})
}

inline as-marshal: marshal(binary, binary) {
  Marshal of {
    encode = encode-binary,
    decode = decode-binary,
  }
}

define zen(): unit {
  let h-save = create-encode-handle(4) in
  tie _Text(value) = "枝ごとに花散りまがへ今はとて春の過ぎゆく道見えぬまで" in
  let _ on h-save = encode-binary(h-save, value) in
  let b = get(h-save) in
  pin h = from-bytes(b) in
  let mval = decode-binary(h) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [_Text(axiom-T(v))])
  }
}
