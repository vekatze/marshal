import {
  binary-builder.entity {builder, create, get},
  binary-builder.scene {append-binary},
  core.binary {binary, binary-length},
  core.box {axiom-T},
  core.text {_Text},
  this.move.class.int64,
  this.move.common.cursor {proceed-binary},
  this.move.create-decode-handle {from-bytes},
  this.rule.decode-handle {decode-handle},
  this.rule.marshal {Marshal, marshal},
}

define encode-binary(b: &builder, x: &binary): unit {
  pin len = binary-length(x) in
  this.move.class.int64.encode-int64(b, len);
  append-binary(b, x)
}

define decode-binary(h: &decode-handle): ?meta binary {
  try b = proceed-binary(h) in
  Right(quote {b})
}

inline as-marshal: marshal(binary, binary) {
  Marshal of {
    encode = encode-binary,
    decode = decode-binary,
  }
}

define zen(): unit {
  let buf = create(4) in
  tie _Text(value) = "枝ごとに花散りまがへ今はとて春の過ぎゆく道見えぬまで" in
  let _ on buf = encode-binary(buf, value) in
  let b = get(buf) in
  pin h = from-bytes(b) in
  let mval = decode-binary(h) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [_Text(axiom-T(v))])
  }
}
