import {
  core.binary {binary},
  core.text {_Text},
  this.move.common.get {get-binary},
  this.move.common.put {put-binary},
  this.move.decode {decode},
  this.move.encode {encode},
  this.rule.get-handle {get-handle},
  this.rule.put-handle {put-handle},
  this.rule.sero {Sero, sero},
}

define _put(h: &put-handle, x: &binary): unit {
  put-binary(h, x)
}

define _get(h: &get-handle): ?meta binary {
  try b = get-binary(h) in
  Right(quote {b})
}

inline binary-sero: sero(binary, binary) {
  Sero of {
    put = _put,
    get = _get,
  }
}

define zen(): unit {
  tie _Text(value) = "枝ごとに花散りまがへ今はとて春の過ぎゆく道見えぬまで" in
  match decode(binary-sero, encode(binary-sero, value, 12345)) {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [_Text(v)])
  }
}
