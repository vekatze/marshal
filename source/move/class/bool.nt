import {
  core.box {axiom-T},
  this.move.common.get {get-int8},
  this.move.common.put {extract-binary, put-int8},
  this.move.create-get-handle {create-get-handle},
  this.move.create-put-handle {create-put-handle},
  this.rule.get-handle {get-handle},
  this.rule.marshal {Marshal, marshal},
  this.rule.put-handle {put-handle},
}

define _put(h: &put-handle, x: &bool): unit {
  if *x {
    put-int8(h, 1)
  } else {
    put-int8(h, 0)
  }
}

define _get(h: &get-handle): ?meta bool {
  try v = get-int8(h) in
  Right(quote {eq-int8(v, 1)})
}

inline as-marshal: marshal(bool, bool) {
  Marshal of {
    put = _put,
    get = _get,
  }
}

define zen(): unit {
  let Marshal of {get, put} = as-marshal in
  let h-save = create-put-handle(1) in
  pin val = True in
  let _ on h-save = put(h-save, val) in
  let b = extract-binary(h-save) in
  pin h = create-get-handle(b) in
  match get(h) {
  | Left(_) =>
    print("left")
  | Right(v) =>
    let v = axiom-T(v) in
    if v {
      print("true\n")
    } else {
      print("false\n")
    }
  }
}
