import {
  this.move.common.get {get-int8},
  this.move.common.put {put-int8},
  this.move.decode {decode},
  this.move.encode {encode},
  this.rule.get-handle {get-handle},
  this.rule.marshal {Marshal, marshal},
  this.rule.put-handle {put-handle},
}

define _put(h: &put-handle, x: &bool): unit {
  if *x {
    put-int8(h, 1)
  } else {
    put-int8(h, 0)
  }
}

define _get(h: &get-handle): ?meta bool {
  try v = get-int8(h) in
  Right(quote {eq-int8(v, 1)})
}

inline as-marshal: marshal(bool, bool) {
  Marshal of {
    put = _put,
    get = _get,
  }
}

define zen(): unit {
  pin val = True in
  match decode(as-marshal, encode(as-marshal, val, 1)) {
  | Left(_) =>
    print("left")
  | Right(v) =>
    let v = v in
    if v {
      print("true\n")
    } else {
      print("false\n")
    }
  }
}
