import {
  this.move.common.get {get-int8},
  this.move.common.put {put-int8},
  this.move.decode {decode},
  this.move.encode {encode},
  this.rule.get-kit {get-kit},
  this.rule.put-kit {put-kit},
  this.rule.sero {Sero, sero},
}

define _put(k: &put-kit, x: &bool): unit {
  if *x {
    put-int8(k, 1)
  } else {
    put-int8(k, 0)
  }
}

define _get(k: &get-kit): ?meta bool {
  try v = get-int8(k) in
  Right(quote {eq-int8(v, 1)})
}

inline bool-sero: sero(bool, bool) {
  Sero of {
    put = _put,
    get = _get,
  }
}

define zen(): unit {
  pin val = True in
  match decode(bool-sero, encode(bool-sero, val, 1)) {
  | Left(_) =>
    print("left")
  | Right(v) =>
    let v = v in
    if v {
      print("true\n")
    } else {
      print("false\n")
    }
  }
}
