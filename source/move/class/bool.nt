import {
  core.box {axiom-T},
  this.move.common.get {get-int8},
  this.move.common.put {get, put-int8},
  this.move.create-decode-handle {from-bytes},
  this.move.create-encode-handle {create-encode-handle},
  this.rule.get-handle {decode-handle},
  this.rule.put-handle {encode-handle},
  this.rule.marshal {Marshal, marshal},
}

define _encode(h: &encode-handle, x: &bool): unit {
  if *x {
    put-int8(h, 1)
  } else {
    put-int8(h, 0)
  }
}

define _decode(h: &decode-handle): ?meta bool {
  try v = get-int8(h) in
  Right(quote {eq-int8(v, 1)})
}

inline as-marshal: marshal(bool, bool) {
  Marshal of {
    encode = _encode,
    decode = _decode,
  }
}

define zen(): unit {
  let h-save = create-encode-handle(1) in
  pin val = True in
  let _ on h-save = _encode(h-save, val) in
  let b = get(h-save) in
  pin h = from-bytes(b) in
  match _decode(h) {
  | Left(_) =>
    print("left")
  | Right(v) =>
    let v = axiom-T(v) in
    if v {
      print("true\n")
    } else {
      print("false\n")
    }
  }
}
