import {
  core.box {axiom-T},
  core.int.show {show-int},
  this.move.common.get {get-int16},
  this.move.common.put {get, put-int16},
  this.move.create-get-handle {from-bytes},
  this.move.create-put-handle {create-put-handle},
  this.rule.get-handle {get-handle},
  this.rule.marshal {Marshal, marshal},
  this.rule.put-handle {put-handle},
}

define encode-int16(h: &put-handle, x: &int16): unit {
  put-int16(h, *x)
}

define decode-int16(h: &get-handle): ?meta int16 {
  try v = get-int16(h) in
  Right(quote {v})
}

inline as-marshal: marshal(int16, int16) {
  Marshal of {
    encode = encode-int16,
    decode = decode-int16,
  }
}

define zen(): unit {
  let h-save = create-put-handle(4) in
  pin val = -12345 in
  let _ on h-save = encode-int16(h-save, val) in
  let b = get(h-save) in
  pin h = from-bytes(b) in
  let mval = decode-int16(h) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [show-int(sext-int16-int(axiom-T(v)))])
  }
}
