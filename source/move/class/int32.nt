import {
  binary-builder.entity {builder, create, get},
  binary-builder.scene {append-int32-big-endian},
  core.box {axiom-T},
  core.int.show {show-int},
  this.move.common.cursor {proceed-int32},
  this.move.create-decode-handle {from-bytes},
  this.rule.decode-handle {decode-handle},
  this.rule.marshal {Marshal, marshal},
}

define encode-int32(b: &builder, x: &int32): unit {
  append-int32-big-endian(b, *x)
}

define decode-int32(h: &decode-handle): ?meta int32 {
  try v = proceed-int32(h) in
  Right(quote {v})
}

inline as-marshal: marshal(int32, int32) {
  Marshal of {
    encode = encode-int32,
    decode = decode-int32,
  }
}

define zen(): unit {
  let buf = create(4) in
  pin val = 14909826 in
  let _ on buf = encode-int32(buf, val) in
  let b = get(buf) in
  pin h = from-bytes(b) in
  let mval = decode-int32(h) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [show-int(sext-int32-int(axiom-T(v)))])
  }
}
