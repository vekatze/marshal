import {
  core.box {axiom-T},
  core.int.show {show-int},
  this.move.common.get {get-int64},
  this.move.common.put {get, put-int64},
  this.move.create-decode-handle {from-bytes},
  this.move.create-encode-handle {create-encode-handle},
  this.rule.get-handle {decode-handle},
  this.rule.put-handle {encode-handle},
  this.rule.marshal {Marshal, marshal},
}

define encode-int64(h: &encode-handle, x: &int64): unit {
  put-int64(h, *x)
}

define decode-int64(h: &decode-handle): ?meta int64 {
  try v = get-int64(h) in
  Right(quote {v})
}

inline as-marshal: marshal(int64, int64) {
  Marshal of {
    encode = encode-int64,
    decode = decode-int64,
  }
}

define zen(): unit {
  let h-save = create-encode-handle(8) in
  pin val = -9223372036854775807 in
  let _ on h-save = encode-int64(h-save, val) in
  let b = get(h-save) in
  pin h = from-bytes(b) in
  let mval = decode-int64(h) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [show-int(axiom-T(v))])
  }
}
