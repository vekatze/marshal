import {
  binary-builder.entity {builder, create, get},
  binary-builder.scene {append-int8},
  core.box {axiom-T},
  core.int.show {show-int},
  this.move.common.cursor {proceed-int8},
  this.move.create-decode-handle {from-bytes},
  this.rule.decode-handle {decode-handle},
  this.rule.marshal {Marshal, marshal},
}

define encode-int8(b: &builder, x: &int8): unit {
  append-int8(b, *x)
}

define decode-int8(h: &decode-handle): ?meta int8 {
  try v = proceed-int8(h) in
  Right(quote {v})
}

inline as-marshal: marshal(int8, int8) {
  Marshal of {
    encode = encode-int8,
    decode = decode-int8,
  }
}

define zen(): unit {
  let buf = create(4) in
  pin val = 127 in
  let _ on buf = encode-int8(buf, val) in
  let b = get(buf) in
  pin h = from-bytes(b) in
  let mval = decode-int8(h) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [show-int(sext-int8-int(axiom-T(v)))])
  }
}
