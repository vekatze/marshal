import {
  core.box {axiom-T},
  core.int.show {show-int},
  core.list {for},
  this.move.class.int64,
  this.move.common.cursor {proceed-int8},
  this.move.common.save {get, save-int8},
  this.move.create-decode-handle {from-bytes},
  this.move.create-encode-handle {create-encode-handle},
  this.rule.decode-handle {decode-handle},
  this.rule.encode-handle {encode-handle},
  this.rule.marshal {Marshal, marshal},
}

inline encode-list<a1, a2>(!m: marshal(a1, a2)): (h: &encode-handle, xs: &list(a1)) -> unit {
  define self(h: &encode-handle, xs: &list(a1)): unit {
    case xs {
    | Nil =>
      save-int8(h, 0)
    | Cons(y, ys) =>
      let Marshal of {encode} = !m in
      save-int8(h, 1);
      encode(h, y);
      self(h, ys)
    }
  }
}

inline decode-list<a1, a2>(!m: marshal(a1, a2)): (h: &decode-handle) -> ?meta list(a2) {
  define self(h: &decode-handle): ?meta list(a2) {
    try tag = proceed-int8(h) in
    if eq-int8(tag, 0) {
      Right(box {Nil})
    } else-if eq-int8(tag, 1) {
      let Marshal of {decode} = !m in
      try v = decode(h) in
      try vs = self(h) in
      Right(box {
        letbox v' = v in
        letbox vs' = vs in
        Cons(v', vs')
      })
    } else {
      none
    }
  }
}

inline as-marshal<a1, a2>(!m: marshal(a1, a2)): marshal(list(a1), list(a2)) {
  Marshal of {
    encode = encode-list(!m),
    decode = decode-list(!m),
  }
}

inline int-list: marshal(list(int), list(int)) {
  as-marshal(this.move.class.int64.as-marshal)
}

define zen(): unit {
  let Marshal of {encode, decode} = int-list in
  let h-save = create-encode-handle(8) in
  pin val = [1, 2, -123, 1384910234] in
  let _ on h-save = encode(h-save, val) in
  let b = get(h-save) in
  pin h = from-bytes(b) in
  let mval = decode(h) in
  match mval {
  | Left(_) =>
    print("left\n")
  | Right(vs) =>
    print("int-list\n");
    for(axiom-T(vs), function (v) {
      printf("val: {}\n", [show-int(v)])
    })
  }
}
