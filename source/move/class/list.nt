import {
  core.int.show {show-int},
  core.list {for},
  this.move.class.int64 {int64-sero},
  this.move.common.get {get-int8},
  this.move.common.put {put-int8},
  this.move.decode {decode},
  this.move.encode {encode},
  this.rule.get-handle {get-handle},
  this.rule.put-handle {put-handle},
  this.rule.sero {Sero, sero},
}

inline _put<i, o>(!m: sero(i, o)): (h: &put-handle, xs: &list(i)) -> unit {
  define self(h, xs): unit {
    case xs {
    | Nil =>
      put-int8(h, 0)
    | Cons(y, ys) =>
      let Sero of {put} = !m in
      put-int8(h, 1);
      put(h, y);
      self(h, ys)
    }
  }
}

inline _get<i, o>(!m: sero(i, o)): (h: &get-handle) -> ?meta list(o) {
  define self(h) {
    try tag = get-int8(h) in
    if eq-int8(tag, 0) {
      Right(box {Nil})
    } else-if eq-int8(tag, 1) {
      let Sero of {get} = !m in
      try v = get(h) in
      try vs = self(h) in
      Right(box {
        letbox v' = v in
        letbox vs' = vs in
        Cons(v', vs')
      })
    } else {
      none
    }
  }
}

inline list-sero<i, o>(!m: sero(i, o)): sero(list(i), list(o)) {
  Sero of {
    put = _put(!m),
    get = _get(!m),
  }
}

inline _list-int-sero: sero(list(int), list(int)) {
  list-sero(int64-sero)
}

define zen(): unit {
  pin val = [1, 2, -123, 1384910234] in
  match decode(_list-int-sero, encode(_list-int-sero, val, 8)) {
  | Left(_) =>
    print("left\n")
  | Right(vs) =>
    print("int-list\n");
    for(vs, function (v) {
      printf("val: {}\n", [show-int(v)])
    })
  }
}
