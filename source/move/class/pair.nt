import {
  core.bool.show,
  core.int.show {show-int},
  this.move.class.bool {bool-sero},
  this.move.class.int64 {int64-sero},
  this.move.decode {decode},
  this.move.encode {encode},
  this.rule.get-kit {get-kit},
  this.rule.put-kit {put-kit},
  this.rule.sero {Sero, sero},
}

inline _put<i1, o1, i2, o2>(
  m1: sero(i1, o1),
  m2: sero(i2, o2),
): (k: &put-kit, xy: &pair(i1, i2)) -> unit {
  function (k, xy) {
    tie Pair(x, y) = xy in
    let Sero of {put = put1} = m1 in
    let Sero of {put = put2} = m2 in
    put1(k, x);
    put2(k, y)
  }
}

inline _get<i1, o1, i2, o2>(
  m1: sero(i1, o1),
  m2: sero(i2, o2),
): (k: &get-kit) -> ?meta pair(o1, o2) {
  function (k) {
    let Sero of {get = get1} = m1 in
    let Sero of {get = get2} = m2 in
    try l = get1(k) in
    try r = get2(k) in
    Right(box {
      letbox l' = l in
      letbox r' = r in
      Pair(l', r')
    })
  }
}

inline pair-sero<i1, o1, i2, o2>(
  !m1: sero(i1, o1),
  !m2: sero(i2, o2),
): sero(pair(i1, i2), pair(o1, o2)) {
  Sero of {
    put = _put(!m1, !m2),
    get = _get(!m1, !m2),
  }
}

inline _pair-int-bool: sero(pair(int, bool), pair(int, bool)) {
  pair-sero(int64-sero, bool-sero)
}

define zen(): unit {
  pin val = Pair(-1234, True) in
  match decode(_pair-int-bool, encode(_pair-int-bool, val, 8)) {
  | Left(_) =>
    print("left\n")
  | Right(xy) =>
    let Pair(x, y) = xy in
    printf("int: {}\n", [show-int(x)]);
    printf("bool: {}\n", [core.bool.show.show(y)])
  }
}
