import {
  core.bool.show,
  core.box {axiom-T},
  core.int.show {show-int},
  this.move.class.bool,
  this.move.class.int64,
  this.move.common.put {extract-binary},
  this.move.create-get-handle {from-bytes},
  this.move.create-put-handle {create-put-handle},
  this.rule.get-handle {get-handle},
  this.rule.marshal {Marshal, marshal},
  this.rule.put-handle {put-handle},
}

inline _put<i1, o1, i2, o2>(
  m1: marshal(i1, o1),
  m2: marshal(i2, o2),
): (h: &put-handle, xy: &pair(i1, i2)) -> unit {
  function (h, xy) {
    tie Pair(x, y) = xy in
    let Marshal of {put = put1} = m1 in
    let Marshal of {put = put2} = m2 in
    put1(h, x);
    put2(h, y)
  }
}

inline _get<i1, o1, i2, o2>(
  m1: marshal(i1, o1),
  m2: marshal(i2, o2),
): (h: &get-handle) -> ?meta pair(o1, o2) {
  function (h) {
    let Marshal of {get = get1} = m1 in
    let Marshal of {get = get2} = m2 in
    try l = get1(h) in
    try r = get2(h) in
    Right(box {
      letbox l' = l in
      letbox r' = r in
      Pair(l', r')
    })
  }
}

inline as-marshal<i1, o1, i2, o2>(
  !m1: marshal(i1, o1),
  !m2: marshal(i2, o2),
): marshal(pair(i1, i2), pair(o1, o2)) {
  Marshal of {
    put = _put(!m1, !m2),
    get = _get(!m1, !m2),
  }
}

inline pair-int-bool: marshal(pair(int, bool), pair(int, bool)) {
  as-marshal(this.move.class.int64.as-marshal, this.move.class.bool.as-marshal)
}

define zen(): unit {
  let h-save = create-put-handle(8) in
  pin val = Pair(-1234, True) in
  let Marshal of {put, get} = pair-int-bool in
  let _ on h-save = put(h-save, val) in
  let b = extract-binary(h-save) in
  pin h = from-bytes(b) in
  let mval = get(h) in
  match mval {
  | Left(_) =>
    print("left\n")
  | Right(xy) =>
    let Pair(x, y) = axiom-T(xy) in
    printf("int: {}\n", [show-int(x)]);
    printf("bool: {}\n", [core.bool.show.show(y)])
  }
}
