import {
  core.bool.show,
  core.box {axiom-T},
  core.int.show {show-int},
  this.move.class.bool,
  this.move.class.int64,
  this.move.common.save {get},
  this.move.create-decode-handle {from-bytes},
  this.move.create-encode-handle {create-encode-handle},
  this.rule.decode-handle {decode-handle},
  this.rule.encode-handle {encode-handle},
  this.rule.marshal {Marshal, marshal},
}

inline encode-pair<a1, a2, b1, b2>(
  m1: marshal(a1, a2),
  m2: marshal(b1, b2),
): (h: &encode-handle, xy: &pair(a1, b1)) -> unit {
  function (h: &encode-handle, xy: &pair(a1, b1)): unit {
    tie Pair(x, y) = xy in
    let Marshal of {encode = encode1} = m1 in
    let Marshal of {encode = encode2} = m2 in
    encode1(h, x);
    encode2(h, y)
  }
}

inline decode-pair<a1, a2, b1, b2>(
  m1: marshal(a1, a2),
  m2: marshal(b1, b2),
): (h: &decode-handle) -> ?meta pair(a2, b2) {
  function (h: &decode-handle): ?meta pair(a2, b2) {
    let Marshal of {decode = decode1} = m1 in
    let Marshal of {decode = decode2} = m2 in
    try l = decode1(h) in
    try r = decode2(h) in
    Right(box {
      letbox l' = l in
      letbox r' = r in
      Pair(l', r')
    })
  }
}

inline as-marshal<a1, a2, b1, b2>(!m1: marshal(a1, a2), !m2: marshal(b1, b2)): marshal(pair(a1, b1), pair(a2, b2)) {
  Marshal of {
    encode = encode-pair(!m1, !m2),
    decode = decode-pair(!m1, !m2),
  }
}

inline pair-int-bool: marshal(pair(int, bool), pair(int, bool)) {
  as-marshal(this.move.class.int64.as-marshal, this.move.class.bool.as-marshal)
}

define zen(): unit {
  let h-save = create-encode-handle(8) in
  pin val = Pair(-1234, True) in
  let Marshal of {encode, decode} = pair-int-bool in
  let _ on h-save = encode(h-save, val) in
  let b = get(h-save) in
  pin h = from-bytes(b) in
  let mval = decode(h) in
  match mval {
  | Left(_) =>
    print("left\n")
  | Right(xy) =>
    let Pair(x, y) = axiom-T(xy) in
    printf("int: {}\n", [show-int(x)]);
    printf("bool: {}\n", [core.bool.show.show(y)])
  }
}
