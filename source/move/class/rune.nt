import {
  binary-builder.entity {builder, create, get},
  core.binary {binary},
  core.box {axiom-T},
  core.rune.show {show-rune},
  this.move.class.int32 {decode-int32, encode-int32},
  this.rule.marshal {Marshal, marshal},
}

define encode-rune(b: &builder, x: &rune): unit {
  encode-int32(b, magic cast(&rune, &int32, x))
}

define decode-rune(b: &binary, cursor-ref: &cell(int)): ?meta rune {
  try v = decode-int32(b, cursor-ref) in
  Right(box {
    letbox v' = v in
    magic cast(int32, rune, v')
  })
}

inline as-marshal: marshal(rune, rune) {
  Marshal of {
    encode = encode-rune,
    decode = decode-rune,
  }
}

define zen(): unit {
  let buf = create(4) in
  pin val = `あ` in
  let _ on buf = encode-rune(buf, val) in
  pin b = get(buf) in
  pin cursor-ref = new-cell(0) in
  let mval = decode-rune(b, cursor-ref) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [show-rune(axiom-T(v))])
  }
}
