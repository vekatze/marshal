import {
  core.box {axiom-T},
  core.rune.show {show-rune},
  this.move.common.get {get-int32},
  this.move.common.put {extract-binary, put-int32},
  this.move.create-get-handle {create-get-handle},
  this.move.create-put-handle {create-put-handle},
  this.rule.get-handle {get-handle},
  this.rule.marshal {Marshal, marshal},
  this.rule.put-handle {put-handle},
}

define _put(h: &put-handle, x: &rune): unit {
  put-int32(h, magic cast(&rune, int32, x))
}

define _get(h: &get-handle): ?meta rune {
  try v = get-int32(h) in
  Right(quote {magic cast(int32, rune, v)})
}

inline as-marshal: marshal(rune, rune) {
  Marshal of {
    put = _put,
    get = _get,
  }
}

define zen(): unit {
  let Marshal of {put, get} = as-marshal in
  let h-save = create-put-handle(4) in
  pin val = `あ` in
  let _ on h-save = put(h-save, val) in
  let b = extract-binary(h-save) in
  pin h = create-get-handle(b) in
  let mval = get(h) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [show-rune(axiom-T(v))])
  }
}
