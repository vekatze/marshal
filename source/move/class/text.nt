import {
  core.box {axiom-T},
  core.text {_Text},
  this.move.common.get {get-binary},
  this.move.common.put {get, put-text},
  this.move.create-get-handle {from-bytes},
  this.move.create-put-handle {create-put-handle},
  this.rule.get-handle {get-handle},
  this.rule.marshal {Marshal, marshal},
  this.rule.put-handle {put-handle},
}

define encode-text(h: &put-handle, x: &text): unit {
  put-text(h, x)
}

define decode-text(h: &get-handle): ?meta text {
  try b = get-binary(h) in
  Right(quote {_Text(b)})
}

inline as-marshal: marshal(text, text) {
  Marshal of {
    encode = encode-text,
    decode = decode-text,
  }
}

define zen(): unit {
  let h-save = create-put-handle(4) in
  tie value = "枝ごとに花散りまがへ今はとて春の過ぎゆく道見えぬまで" in
  let _ on h-save = encode-text(h-save, value) in
  let b = get(h-save) in
  pin h = from-bytes(b) in
  let mval = decode-text(h) in
  match mval {
  | Left(_) =>
    print("left")
  | Right(v) =>
    printf("value: {}\n", [axiom-T(v)])
  }
}
