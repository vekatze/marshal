import {
  core.box {axiom-T},
  core.int.show {show-int},
  core.vector {vector},
  this.move.class.int64,
  this.move.common.get {get-int64},
  this.move.common.put {extract-binary, put-int64},
  this.move.create-get-handle {create-get-handle},
  this.move.create-put-handle {create-put-handle},
  this.rule.get-handle {get-handle},
  this.rule.marshal {Marshal, marshal},
  this.rule.put-handle {put-handle},
}

inline _put<i, o>(m: marshal(i, o)): (h: &put-handle, xs: &vector(i)) -> unit {
  function (h, xs) {
    let len = core.vector.length(xs) in
    put-int64(h, len);
    core.vector.for-N(xs, function (x, _) {
      let Marshal of {put} = m in
      put(h, x)
    })
  }
}

inline _get<i, o>(m: marshal(i, o)): (h: &get-handle) -> ?meta vector(o) {
  function (h) {
    try len = get-int64(h) in
    try vs =
      core.vector.create-E(len, function (_) {
        let Marshal of {get} = m in
        try value = get(h) in
        Right(axiom-T(value))
      })
    in
    Right(magic cast(vector(o), meta vector(o), vs))
  }
}

inline as-marshal<i, o>(!m: marshal(i, o)): marshal(vector(i), vector(o)) {
  Marshal of {
    put = _put(!m),
    get = _get(!m),
  }
}

inline _int-vector: marshal(vector(int), vector(int)) {
  as-marshal(this.move.class.int64.as-marshal)
}

define zen(): unit {
  let Marshal of {put, get} = _int-vector in
  let h-save = create-put-handle(8) in
  pin val = core.vector.from-list([1, 2, -123, 1384910234]) in
  let _ on h-save = put(h-save, val) in
  let b = extract-binary(h-save) in
  pin h = create-get-handle(b) in
  let mval = get(h) in
  match mval {
  | Left(_) =>
    print("left\n")
  | Right(vs) =>
    print("int-vector\n");
    pin vs = axiom-T(vs) in
    core.vector.for-N(vs, function (v, _) {
      printf("val: {}\n", [show-int(*v)])
    })
  }
}
