import {
  binary-builder.move.append {append-int8},
  binary-builder.move.extract {extract},
  binary-builder.move.make-builder {make-builder},
  core.binary {binary, binary-access, binary-length},
  core.cell {mutate},
  core.control {loop},
  core.memory {load-float, load-int, load-int16, load-int32, load-int8},
  core.pointer {shift},
  core.text {_Text},
  this.rule.get-kit {Get-Kit, get-kit},
}

define _proceed(cursor: &cell(int), offset: int): unit {
  mutate(cursor, function (x) {
    add-int(x, offset)
  })
}

define _get-ptr(bytes: &binary, index: int, elem-size: int): ?pointer {
  if lt-int(binary-length(bytes), add-int(index, elem-size)) {
    none
  } else {
    Right(core.binary._get-content-pointer(bytes))
  }
}

define _get<a>(k: &get-kit, size: int, loader: (pointer) -> a): ?a {
  tie Get-Kit of {bytes, cursor} = k in
  let index = core.cell.clone(cursor) in
  try ptr = _get-ptr(bytes, index, size) in
  let result = loader(shift(ptr, index)) in
  _proceed(cursor, size);
  Right(result)
}

define get-int8(k: &get-kit): ?int8 {
  _get(k, 1, load-int8)
}

define get-int16(k: &get-kit): ?int16 {
  _get(k, 2, load-int16)
}

define get-int32(k: &get-kit): ?int32 {
  _get(k, 4, load-int32)
}

define get-int64(k: &get-kit): ?int64 {
  _get(k, 8, load-int)
}

define get-float16(k: &get-kit): ?float16 {
  _get(k, 2, function (p) {
    magic load(float16, p)
  })
}

define get-float32(k: &get-kit): ?float32 {
  _get(k, 4, function (p) {
    magic load(float32, p)
  })
}

define get-float64(k: &get-kit): ?float64 {
  _get(k, 8, load-float)
}

define get-binary(k: &get-kit): ?binary {
  tie Get-Kit of {bytes, cursor} = k in
  try len = get-int64(k) in
  let buf = make-builder(len) in
  let index = core.cell.clone(cursor) in
  let _ on buf =
    loop(len, function (k) {
      let v = binary-access(bytes, add-int(index, k)) in
      append-int8(buf, v)
    })
  in
  let result = extract(buf) in
  _proceed(cursor, len);
  Right(result)
}

define get-text(k: &get-kit): ?text {
  try b = get-binary(k) in
  Right(_Text(b))
}
