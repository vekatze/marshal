import {
  core.binary {binary},
  core.binary.io,
  core.file {close, open},
  core.file.flag {for-r},
  core.system {system},
  this.move.create-get-handle {create-get-handle},
  this.rule.sero {Sero, sero},
}

define decode<a, b>(m: sero(a, b), bytes: binary): ?b {
  let Sero of {get} = m in
  let h = create-get-handle(bytes) in
  letbox-T result on h =
    match get(h) {
    | Left(_) =>
      box {none}
    | Right(v) =>
      box {
        letbox v' = v in
        Right(v')
      }
    }
  in
  let _ = h in
  result
}

define decode-file<a, b>(m: sero(a, b), path: &text): system(?b) {
  try source-file = open(path, for-r, []) in
  try bytes = core.binary.io.read(source-file, 1024) in
  try _ = close(source-file) in
  Right(decode(m, bytes))
}
