import {
  core.int.show {show-int},
  this.move.common.get {get-int8},
  this.move.common.put {put-int8},
  this.move.decode {decode},
  this.move.encode {encode},
  this.move.instance.bool {bool-sero},
  this.move.instance.int64 {int64-sero},
  this.rule.get-kit {get-kit},
  this.rule.put-kit {put-kit},
  this.rule.sero {Sero, sero},
}

inline _put<a, b>(m1: sero(a), m2: sero(b)): (k: &put-kit, x-or-y: &either(a, b)) -> unit {
  function (k, x-or-y) {
    case x-or-y {
    | Left(x) =>
      let Sero of {put} = m1 in
      put-int8(k, 0);
      put(k, x)
    | Right(y) =>
      let Sero of {put} = m2 in
      put-int8(k, 1);
      put(k, y)
    }
  }
}

inline _get<a, b>(m1: sero(a), m2: sero(b)): (k: &get-kit) -> ?meta either(a, b) {
  function (k) {
    try tag = get-int8(k) in
    if eq-int8(tag, 0) {
      let Sero of {get} = m1 in
      try l = get(k) in
      Right(box {
        letbox l' = l in
        Left(l')
      })
    } else-if eq-int8(tag, 1) {
      let Sero of {get} = m2 in
      try r = get(k) in
      Right(box {
        letbox r' = r in
        Right(r')
      })
    } else {
      none
    }
  }
}

inline either-sero<a, b>(!m1: sero(a), !m2: sero(b)): sero(either(a, b)) {
  Sero of {
    put = _put(!m1, !m2),
    get = _get(!m1, !m2),
  }
}

inline _either-int-bool: sero(either(int, bool)) {
  either-sero(int64-sero, bool-sero)
}

define zen(): unit {
  pin val = Left(-1234) in
  match decode(_either-int-bool, encode(_either-int-bool, val, 8)) {
  | Left(_) =>
    print("error\n")
  | Right(x-or-y) =>
    match x-or-y {
    | Left(x) =>
      printf("int: {}\n", [show-int(x)])
    | Right(_) =>
      print("bool\n")
    }
  }
}
