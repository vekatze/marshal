import {
  core.file {close, open},
  core.file.flag {for-r},
  core.system {system},
  this.move.create-decode-handle {create-decode-handle},
  this.rule.marshal {Marshal, marshal},
}

define load<a, b>(m: marshal(a, b), path: &text): system(?b) {
  try h = create-decode-handle(path) in
  let Marshal of {decode} = m in
  try source-file = open(path, for-r, []) in
  try _ = close(source-file) in
  letbox-T result: ?b on h =
    match decode(h) {
    | Left(_) =>
      box {none}
    | Right(v) =>
      box {
        letbox v' = v in
        Right(v')
      }
    }
  in
  let _ = h in
  Right(result)
}
